'''
Python
'''

# euler project
'''
http://projecteuler.net/problem=4
'''
unsolved=0
def printf(s):
    global unsolved
    unsolved+=1
    print('%3d\t%s\n' %(unsolved,s))
    

# Problem 1 Multiples of 3 and 5
'''If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.'''
##printf('Problem 1 Multiples of 3 and 5')
##def summuls(a,b,limits):
##    total=0
##    for i in range(limits):
##        if i%a==0 or i%b==0:
##            total+=i
##    return total
###    total=0
###    return sum([i for i in range(limits) if i%a == 0 or i%b==0])
##print(summuls(3,5,10))
##print('summuls(3,5,1000)',summuls(3,5,1000))


# Problem 2 Even Fibonacci numbers
'''Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms. '''
'''


def fib(n):
    a=1
    b=2
    while a<=n:
	    print(a)
	    a,b=b,a+b

print('\nP2 ')
def sumevenfib(n):
    a=b=1
    total=0
    while a<=n:
        if a%2==0: total+=a
        a,b=b,a+b
    return total
#print('sumevenfib(4000000)=',sumevenfib(4000000))

'''

# Problem 3 Largest prime factor
'''The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600851475143 ?'''
##print('\nP3 ')
##def isprime(n):
##    ''' isprime(integer)->boolean
##    return True if integer is a prime False otherwise
##    '''
##    if n in (1,2):
##        return True
##    else:
##        #while
##        for i in range(2,n):
##            if n%i == 0:
##                return False
##        else:# indent!!!
##            return True
##
##def isprime2(n):
##    '''a faster way to return True if n is a prime False otherwise '''
##    i=2
##    while i<n:
##            if n%i==0:
##                    #print(i)
##                    return False
##            else:
##                    i=max(i+1,n%i)			
##    else: return True
##
##'''
##>>>for i in range(1,45%i):
##	print(i)
##>>>
##'''
##        
##def primes(n):
##    prime=[]
##    for i in range(1,n):
##        if isprime(i):
##            #print(i)
##            prime.append(i)
##    return prime
##
###[print(i) for i in primes(20)]
##
##
##def primefactors(n):
##    primef=[]
##    for i in range(1,n):
##        if isprime(i) and n%i == 0:
##            #print(i)
##            primef.append(i)
##    return primef
##
###print('The prime factors of 13195 are 5, 7, 13 and 29.')
###[print(i,end=' ') for i in primefactors(13195)]
##print()
##    
##def maxprimefactors(n):
##    maxprime=1
##    for i in primes(n):
##        if n%i == 0:
##            maxprime= maxprime and i
##    return maxprime
##
##
###print('maxprimefactors(600851475143)) ',maxprimefactors(600851475143))
### print('end') # never arrived!
##
##def primefactors2(n):
##    primef=[]
##    for i in range(1,n):
##        if isprime2(i) and n%i == 0:
##            #print(i)
##            primef.append(i)
##    return primef
##
###print('The prime factors222 of 13195 are 5, 7, 13 and 29.')
###[print(i,end=' ') for i in primefactors(13195)]
##print()
##
##def fastmpf(n):
##    for i in range(1,n//2):
##        if n%i ==0 and isprime(n//i):
##            return n//i
###print('test:fastmpf(19)) ',fastmpf(19))
###print('test:fastmpf(42)) ',fastmpf(42))
### print('fastmpf(600851475143)) ',fastmpf(600851475143)) #too long
##
##def fastmpf2(n):
##    for i in range(1,n//2):
##        if n%i ==0 and isprime2(n//i):
##            return n//i


# print('test:fastmpf(42)) ',fastmpf2(42))
#print('fastmpf(600851475143)) ',fastmpf2(600851475143))        

# Largest palindrome product
'''Problem 4
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
Find the largest palindrome made from the product of two 3-digit numbers.

print('\nP4')
def maxpal(n):
    nmin=10**(n-1)
    nmax=10**n-1
    mp=[]
    for i in range(nmax,nmin,-1):
        for j in range(nmax,nmin,-1):
            s=str(i*j)
            if s==s[::-1]:
                mp.append((i*j,i,j))
#    x=sorted(mp,reverse=True)    
    return max(mp)
print('2-digit numbers is 9009 = 91 × 99')            
print('2 digits: %d * %d = %d' % maxpal(2) )
print('3 digits: %d * %d = %d' % maxpal(3) )
            
def maxpals():
    for i in range(999,100,-1):
        for j in range(999,100,-1):
            s=str(i*j)
            if s==s[::-1]:
                return((i,j,i*j))
#print('3 digits: %d * %d = %d' % maxpals() )
'''

# Smallest multiple
'''Problem 5
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

print('\n P5')
def minmul(n):
    x=n
    flag= True # not False
    while 1:
        for i in range(1,n+1):
            flag = flag and x%i ==0
        if flag:
            return x
            break
        else:
            x+=n
    

# print('2520 for 1-10',minmul(10)) # never worked
# print('x for 1-20',minmul(20))            

def minmul2(n):
    x=n
    flag= False # not False
    while not flag:
        flag = True
        for i in range(1,n+1):            
            if x%i !=0:
                flag = False
                x+=n                
    return x

#print('2520 for 1-10',minmul2(10)) # never worked
#print('x for 1-20',minmul2(20))            
'''
        
#Sum square difference
'''Problem 6
The sum of the squares of the first ten natural numbers is,

12 + 22 + ... + 102 = 385
The square of the sum of the first ten natural numbers is,

(1 + 2 + ... + 10)2 = 552 = 3025
Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.

Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

print('\nP6')
def dif(n):
    sumosqr=0
    sums=0
    for i in range(1,n+1):
        sumosqr+=i**2
        sums+=i
    sqrofsum=sums**2
    return (sqrofsum,sumosqr,sqrofsum-sumosqr)
print('for 10: 3025 − 385 = 2640')
#print('%d - %d = %d' % dif(10))
#print('%d - %d = %d' % dif(100))
'''

# Problem 7 10001st prime

'''By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
What is the 10 001st prime number?
'''
##print('\nProblem 7 10001st prime')
##import math
##def isprime3(n):
##    '''a much faster way to return True if n is a prime False otherwise '''
##    z=True
##    for i in range(2,n):
##        if i<=math.sqrt(n):
##            if n%i!=0:
##                z=True
##            else:
##                z=False
##                break
##        else:
##            break
##    return z
##  
##    
##def nstprime(n):
##    i=2
##    p=3
##    while i!=n:
##        p+=2
##        if isprime3(p):
##            i+=1
##    return p
##
##print('6th is 13', nstprime(6))
##print('10001st is ', nstprime(10001))


# Problem 8 Largest product in a series
'''
Find the greatest product of five consecutive digits in the 1000-digit number.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
'''

##def maxp(s):
##    maxp=1
##    for i in range(len(s)-5+1):
##        p = 1
##        for j in range(5):
##            p *= int(s[i+j])
##        if maxp<p: maxp=p
##    return maxp
##
##xx='''73167176531330624919225119674426574742355349194934
##96983520312774506326239578318016984801869478851843
##85861560789112949495459501737958331952853208805511
##12540698747158523863050715693290963295227443043557
##66896648950445244523161731856403098711121722383113
##62229893423380308135336276614282806444486645238749
##30358907296290491560440772390713810515859307960866
##70172427121883998797908792274921901699720888093776
##65727333001053367881220235421809751254540594752243
##52584907711670556013604839586446706324415722155397
##53697817977846174064955149290862569321978468622482
##83972241375657056057490261407972968652414535100474
##82166370484403199890008895243450658541227588666881
##16427171479924442928230863465674813919123162824586
##17866458359124566529476545682848912883142607690042
##24219022671055626321111109370544217506941658960408
##07198403850962455444362981230987879927244284909188
##84580156166097919133875499200524063689912560717606
##05886116467109405077541002256983155200055935729725
##71636269561882670428252483600823257530420752963450'''
##xx=xx.replace('\n','')
##print(maxp(xx))        


# Problem 9 Special Pythagorean triplet
'''
A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,

a**2 + b**2 = c**2
For example, 3**2 + 4**2 = 9 + 16 = 25 = 5**2.

There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.'''

##print('\nProblem 9 Special Pythagorean triplet')
##def abc():
##    for a in range(1000//2):
##        for b in range(1000//2):
##            c=1000-a-b
##            if a**2+b**2==c**2:
##                print('a + b + c = 1000, a,b,c:',a,b,c)
##                print('a*b*c:',a*b*c)
##abc()


# Problem 10 Summation of primes
'''
The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
Find the sum of all the primes below two million.
'''
##print('\nProblem 10 Summation of primes')
##import math
##def sumprime(n):
##    ps=[2]
##    x=3
##    '''a much faster way to return True if n is a prime False otherwise '''
##    while x<n:
##        z=True
##        for i in ps:
##            if i<= math.sqrt(x):
##                if x%i != 0:
##                    z=True
##                else:
##                    z=False
##                    break # this is essential! otherwise go to the last for decision
##            else: break
##        if z:
##            ps.append(x)
##        x+=2
##    return sum(ps)
##        
##def sumprimes(n):
##    total=2
##    for i in range(3,n,2):
##        if isprime3(i):
##            total+=i
##    return total
##print(' for 10 is 17', sumprimes(10))
##print(' for 10 is 17', sumprime(10))
##print(' 100  primes ', sumprime(100))
#print(' for 2000000 is ', sumprime(2000000))


# Problem 11 Largest product in a grid

'''In the 20×20 grid below, four numbers along a diagonal line have been marked in red.

08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
The product of these numbers is 26 × 63 × 78 × 14 = 1788696.

What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?
'''

##print('\nProblem 11 Largest product in a grid')
##
##grid20x='''08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
##49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
##81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
##52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
##22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
##24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
##32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
##67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
##24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
##21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
##78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
##16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
##86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
##19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
##04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
##88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
##04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
##20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
##20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
##01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48'''
##
##def mul(lst):
##    mul=1
##    for i in lst:
##        mul*=i
##    return mul
##
##grid2v = grid20x.split('\n')
##grid2m = [s.split() for s in grid2v]
##grid = [[int(i) for i in x ] for x in grid2m]
### print(grid)
##def max4(matrix):
##    max4=1
##    for i in range(len(matrix)): # row        
##        for j in range(len(matrix)-4):
##            sumx= mul([matrix[i][j+k] for k in range(4)])
##            max4=max(max4,sumx)
##
##    for i in range(len(matrix)-4): # col
##        for j in range(len(matrix)):
##            sumx=mul([matrix[i+k][j] for k in range(4)])
##            max4=max(max4,sumx)
##
##    for i in range(len(matrix)-4):
##        for j in range(len(matrix)-4):
##            sumx=mul([matrix[i+k][j+k] for k in range(4)])
##            max4=max(max4,sumx)
##        
##    for i in range(len(matrix)-4):
##        for j in range(len(matrix)-4):
##            sumx=mul([matrix[i+k][j+3-k] for k in range(4)])
##            max4=max(max4,sumx)
##    
##    return max4
##print('max4sum:',max4(grid))


# Problem 12 Highly divisible triangular number

'''The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
http://projecteuler.net/problem=12
'''
##print('\nProblem 12 Highly divisible triangular number')
####def factors(n):
####    facs=[]
####    for i in range(1,n+1):
####        if n%i==0:
####           facs.append(i)
####    return facs
##
####def trifacs(n):
####    trix=sum(range(n+1))
####    return (trix,factors(trix))
####for i in range(1,4):
####    print(trifacs(i))
## 
##import math
##def nfactors(n):
##    nfacs=0
##    nsqrt = math.sqrt(n)
##    if nsqrt**2 == n: r=-1
##    else: r = 0
##    for i in range(1,int(nsqrt)+1): # +1
##        if n%i==0:
##            nfacs+=1
###            print(i)
###            print(nfacs)
##    return nfacs*2+r
##
##
##print('no. of factors of 12', nfactors(12))
##print('no. of factors of 36', nfactors(36))
##
##def ffactors(n):
##    facs=[]
##    nsqrt = int(math.sqrt(n))
##    
##    for i in range(1,nsqrt+1): # +1
##        if n%i==0:
##            facs.append(i)
##             #            print(i)
##    if nsqrt**2 == n : facs.extend([n//i for i in facs[0:-1][::-1]])
##    else: facs.extend([n//i for i in facs[:][::-1]])
##    return facs
##
##print('facs of 12',ffactors(12))
##print('facs of 36',ffactors(36))
##
##   
####def zhaoguilv(n):
####    ind=0
####    for i in range(n+1):
####        if nfactors(i)> ind:
####            ind+=1
####            print(ind,i,ffactors(i))
####            
##### print('zhaoguilv\n',zhaoguilv(100))        
##### print(len(factors(sum(range(15000)))))
####
####
####
####1 1 [1]
####2 2 [1, 2]
####3 4 [1, 2, 4]
####4 6 [1, 2, 3, 6]
####5 12 [1, 2, 3, 4, 6, 12]
####6 18 [1, 2, 3, 6, 9, 18]
####7 24 [1, 2, 3, 4, 6, 8, 12, 24]
####8 36 [1, 2, 3, 4, 6, 9, 12, 18, 36]
####9 48 [1, 2, 3, 4, 6, 8, 12, 16, 24, 48]
####10 60 [1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30, 60]
####11 72 [1, 2, 3, 4, 6, 8, 9, 12, 18, 24, 36, 72]
####12 96 [1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 96]
####
####1    1 [1]
####2    2 [1, 2]
####3    4 [1, 2, 2]
####5   12 [1, 2, 2, 3]
####7   24 [1, 2, 2, 2, 3]
####9   48 [1, 2, 2, 2, 2, 3]
####10  60 [1, 2, 2, 3, 5]
####11  72 [1, 2, 2, 2, 3, 3]
####13 120 [1, 2, 2, 2, 3, 5]
####16 180 [1, 2, 2, 3, 3, 5]
####17 240 [1, 2, 2, 2, 2, 3, 5]
####20 360 [1, 2, 2, 2, 3, 3, 5]
####25 720 [1, 2, 2, 2, 2, 3, 3, 5]
####26 840 [1, 2, 2, 2, 3, 5, 7]
####-
####2
####2
####3
####2
####2
####-22 +5
####-5 23
####33
####2
##
##
##prime=(2,3,5,7,11,13,17,19,23)
### fetch arbitary numbers from prime, sort the product.
#################?????how to auto expand nested for loop##############
##
##def constri(ndiv):
##    x=16
##    product=[]
##    for i2 in range(16):
##        for i3 in range(16):
##            for i5 in range(8):
##                for i7 in range(8):
##                    for i11 in range(4):
##                        for i13 in range(3):
##                            for i17 in range(3):
##                                for i19 in range(3):
##                                    for i23 in range(2):
##                                        product.append(2**i2*3**i3*5**i5*7**i7*11**i11*13**i13*17**i17*19**i19*23**i23)
##
##    products=sorted(product)
##    print('got products...first ten factors: ',products[:10])
##    for i in products:
##        if nfactors(i)>ndiv:
##            print('1st number that has over %d factors: %d'%(ndiv,i))
##            return i           
##print('first triangle has 5+ pfs:(12)',constri(5)) #12 ^_^
##print('first triangle has 8+ pfs:(36)',constri(8))
###print('1st number that has over 500 factors', constri(500)) # still too slow
##
##
### nfactors(14414400) //504
##
##def fseed(p):
##    x=1
##    while sum(range(x))<=p:
##        x+=1
##    else:
##        print('seed: ', x, sum(range(x)))
##        return(x, sum(range(x)))
##
###5370 14415765
##
##def findtri(ndiv):
##    
##    x=fseed(constri(ndiv))[0]
##    
##    if x%2!=0:
##        x=x-1
##        
##    while nfactors(sum(range(x)))<= ndiv:
##        x+=1
##    else:  return (x,sum(range(x)),nfactors(sum(range(x))))
##
##print('1st triangular number that has over 500 factors', findtri(500)) 
##
##
####got products...first ten:  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
####1st number that has over 500 factors:  14414400
####seed:  5370 14415765
####1st triangular number that has over 500 factors (12376, 76576500, 575)
####problem 15
##
####def fastri(ndiv):
####    x=0
####    y=2
####    while y>=2:
####        y=1
####        while nfactors(sum(range(x+y+1))) <= ndiv:
####            y *= 2
####        x=x+y//2
####
#####    if x%2 != 0: x-=1 
####    print(x)
####    
####    while nfactors(sum(range(x+1))) <= ndiv:
####        x+=1    
####
####    return sum(range(x+1))           
####print('28 has 5+',fastri(5))
####print('36 has 8 +',fastri(8))
####print('1st triangular number that has over 500 factors', fastri(500)) # still too slow
####
##
##
##
####def xftrian(n,*low):
####    ndiv=0
####    seed = 10000
####    while ndiv<=n:
####        ndiv=0
####        trian=sum(range(seed+1))
####        for i in range(1,trian+1):
####            if trian%i == 0:
####                ndiv+=1
####        seed+=1
####    return trian              
####print('28 has over 5 factors:', xftrian(5))                  
####print('tran has 500 factors', xftrian(500))   # too slow               


# Problem 13 Large sum
'''
Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.'''

s='''37107287533902102798797998220837590246510135740250
46376937677490009712648124896970078050417018260538
74324986199524741059474233309513058123726617309629
91942213363574161572522430563301811072406154908250
23067588207539346171171980310421047513778063246676
89261670696623633820136378418383684178734361726757
28112879812849979408065481931592621691275889832738
44274228917432520321923589422876796487670272189318
47451445736001306439091167216856844588711603153276
70386486105843025439939619828917593665686757934951
62176457141856560629502157223196586755079324193331
64906352462741904929101432445813822663347944758178
92575867718337217661963751590579239728245598838407
58203565325359399008402633568948830189458628227828
80181199384826282014278194139940567587151170094390
35398664372827112653829987240784473053190104293586
86515506006295864861532075273371959191420517255829
71693888707715466499115593487603532921714970056938
54370070576826684624621495650076471787294438377604
53282654108756828443191190634694037855217779295145
36123272525000296071075082563815656710885258350721
45876576172410976447339110607218265236877223636045
17423706905851860660448207621209813287860733969412
81142660418086830619328460811191061556940512689692
51934325451728388641918047049293215058642563049483
62467221648435076201727918039944693004732956340691
15732444386908125794514089057706229429197107928209
55037687525678773091862540744969844508330393682126
18336384825330154686196124348767681297534375946515
80386287592878490201521685554828717201219257766954
78182833757993103614740356856449095527097864797581
16726320100436897842553539920931837441497806860984
48403098129077791799088218795327364475675590848030
87086987551392711854517078544161852424320693150332
59959406895756536782107074926966537676326235447210
69793950679652694742597709739166693763042633987085
41052684708299085211399427365734116182760315001271
65378607361501080857009149939512557028198746004375
35829035317434717326932123578154982629742552737307
94953759765105305946966067683156574377167401875275
88902802571733229619176668713819931811048770190271
25267680276078003013678680992525463401061632866526
36270218540497705585629946580636237993140746255962
24074486908231174977792365466257246923322810917141
91430288197103288597806669760892938638285025333403
34413065578016127815921815005561868836468420090470
23053081172816430487623791969842487255036638784583
11487696932154902810424020138335124462181441773470
63783299490636259666498587618221225225512486764533
67720186971698544312419572409913959008952310058822
95548255300263520781532296796249481641953868218774
76085327132285723110424803456124867697064507995236
37774242535411291684276865538926205024910326572967
23701913275725675285653248258265463092207058596522
29798860272258331913126375147341994889534765745501
18495701454879288984856827726077713721403798879715
38298203783031473527721580348144513491373226651381
34829543829199918180278916522431027392251122869539
40957953066405232632538044100059654939159879593635
29746152185502371307642255121183693803580388584903
41698116222072977186158236678424689157993532961922
62467957194401269043877107275048102390895523597457
23189706772547915061505504953922979530901129967519
86188088225875314529584099251203829009407770775672
11306739708304724483816533873502340845647058077308
82959174767140363198008187129011875491310547126581
97623331044818386269515456334926366572897563400500
42846280183517070527831839425882145521227251250327
55121603546981200581762165212827652751691296897789
32238195734329339946437501907836945765883352399886
75506164965184775180738168837861091527357929701337
62177842752192623401942399639168044983993173312731
32924185707147349566916674687634660915035914677504
99518671430235219628894890102423325116913619626622
73267460800591547471830798392868535206946944540724
76841822524674417161514036427982273348055556214818
97142617910342598647204516893989422179826088076852
87783646182799346313767754307809363333018982642090
10848802521674670883215120185883543223812876952786
71329612474782464538636993009049310363619763878039
62184073572399794223406235393808339651327408011116
66627891981488087797941876876144230030984490851411
60661826293682836764744779239180335110989069790714
85786944089552990653640447425576083659976645795096
66024396409905389607120198219976047599490197230297
64913982680032973156037120041377903785566085089252
16730939319872750275468906903707539413042652315011
94809377245048795150954100921645863754710598436791
78639167021187492431995700641917969777599028300699
15368713711936614952811305876380278410754449733078
40789923115535562561142322423255033685442488917353
44889911501440648020369068063960672322193204149535
41503128880339536053299340368006977710650566631954
81234880673210146739058568557934581403627822703280
82616570773948327592232845941706525094512325230608
22918802058777319719839450180888072429661980811197
77158542502016545090413245809786882778948721859617
72107838435069186155435662884062257473692284509516
20849603980134001723930671666823555245252804609722
53503534226472524250874054075591789781264330331690

slst=s.split('\n')
print(slst)

def addslst(slst):
    sums=0
    for i in slst:
        sums+=int(i)
    return str(sums)[0:10]

print('first 10 digits:', addslst(slst))

def sumxx(sl):
    ndigit=len(slst[0])
    nnum=len(slst)
    sumx=0    
    for i in range(ndigit):
        for j in range(nnum):
            sumx += int(slst[j][i])
        sumx *= 10
    return str(sumx)[:10]

print('first 10 digits:', sumxx(slst)) #5537376230     
'''

#Problem 14 Longest Collatz sequence
'''
The following iterative sequence is defined for the set of positive integers:

n → n/2 (n is even)
n → 3n + 1 (n is odd)

Using the rule above and starting with 13, we generate the following sequence:

13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem),
it is thought that all starting numbers finish at 1.

Which starting number, under one million, produces the longest chain?

NOTE: Once the chain starts the terms are allowed to go above one million.
count=[0]
nxx=0
def collatz(n):
    global nxx
    while n!=1:
        if n%2 ==0:
            #print(n)
            nxx +=1
            return collatz(n//2)
        else:
            #print(n)
            nxx+=1
            return collatz(3*n+1)
    else:
        nxx+=1
        return 1

print('Problem 14')

print(collatz(13))
print(count[0])
print(nxx)

def lchain(n):
    lch=0
    ln=0
    for i in range(2,n):
        global nxx
        nxx=0
        collatz(i)        
        if lch<nxx:
            lch=nxx
            ln=i
    return(lch,ln) 
print(lchain(1000000)) #(525, 837799)

col=[]
def colst(n):    
    col.append(n)
    while n!=1:
        if n%2 ==0:
            #print(n)
            return colst(n//2)
        else:
            
            return colst(3*n+1)
    else:
        return 1

def cols(n):    
    global col
    col=[]
    colst(n)
    return col

print(cols(13))

xxx=cols(837799)'''

#Problem 15 Lattice paths
'''
Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner.
**
**
00*11+01*10+10*01+11*00=2 11
***
***
***
00*22+01*21+02*20+10*12+11*11+12*10+20*02+21*01+22*00
0+3+1+3+4+3+1+3+0=18  8
***
***
21= 00*21+01*20+10*11+11*10+20*01+21*00
0+1+2+2+1-m=n-1

How many such routes are there through a 20×20 grid?


(0,0): 0
(1,0): 1
(1,1): 2
(1,2): 3
(2,2): 6
(3,3): 20
(4, 4) 70
(5, 5) 252
(6, 6) 924
(7, 7) 3432
(8, 8) 12870
(9, 9) 48620
(10, 10) 184756
(11, 11) 705432
(12, 12) 2704156
(13, 13) 10400600
(14, 14) 40116600
(15, 15) 155117520
(16, 16) 601080390
'''

##print('\nproblem 15')
##    
##def latpaths(m,n):
##    if m!=1 and n!=1:
##        return latpaths(m-1,n)+latpaths(m,n-1)
##    elif m!=n:
##        return 1
##    else:
##        return 0
##
##latdic={} #############save the results to save the computation  time#######
##
##for i in range(1,11):
##    for j in range(1,11):
##        latdic.update({(i,j):latpaths(i,j)})
##
##print(len(latdic))
##def latpaths1(m,n):
##    if (m,n) in latdic:
##        return latdic[(m,n)]
##    elif m==1 or n==1:
##        return 1
##    else:
##        return latpaths1(m-1,n)+latpaths1(m,n-1)
##        
##print('(0,0):',latpaths(1,1))
##print('(1,0):',latpaths(2,1))
##print('(1,1):',latpaths(2,2))
##print('(1,2):',latpaths(2,3))
##print('(2,2):',latpaths(3,3))
##print('(3,3):',latpaths(4,4))
##
##print('(20,20):',latpaths1(21,21)) #137846528820



#Problem 16 Power digit sum
'''
2**15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.

What is the sum of the digits of the number 2**1000?'''

##def sumdigits(n):
##    digits=[]
##    digit=0
##    for i in range(len(str(n))):
##        digit = n%10
##        digits.append(digit)
##        n=n//10
##    return sum(digits)    
##print('2**15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26', sumdigits(2**15))
##print('2**1000 = ', 2**1000, sumdigits(2**1000))
##2**15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26 26
##2**1000 =  10715086071862673209484250490600018105614048117055336074437503883703510511249361224931983788156958581275946729175531468251871452856923140435984577574698574803934567774824230985421074605062371141877954182153046474983581941267398767559165543946077062914571196477686542167660429831652624386837205668069376 1366


# Problem 17 Number letter counts
'''
If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.
If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?
NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of "and" when writing out numbers is in compliance with British usage.'''

dic = {1:'one',2:'two',3:'three',4:'four',5:'five',6:'six', 7:'seven', 8:'eight',9:'nine',10:'ten', 11:'eleven', 12:'twelve', 13:'thirteen', 14:'fourteen',15:'fifteen',16:'sixteen',17:'seventeen',18:'eighteen',19:'nineteen',20:'twenty',30:'thirty',40:'forty',50:'fifty',60:'sixty',70:'seventy',80:'eighty',90:'ninety',100:'hundred',1000:'thousand'}

##def b1t99(n):
##    if n<=20:
##        return dic[n]
##    elif n%10 == 0:
##        return dic[n]
##    else: return dic[(n//10)*10]+dic[n%10] # //10*10
##
##def b100t999(n):
##    if n%100 == 0:
##        return dic[n//100]+dic[100]
##    else:
##        return dic[n//100]+dic[100]+'and'+b1t99(n%100)
##def b1000t9999(n):
##    if n%1000 == 0:
##        return dic[n//1000]+dic[1000]
##    elif n>=1000:
##        return dic[n//1000]+dic[1000]+b100t999(n//10)
##    elif n>=100:
##        return b100t999(n)
##    else:
##        return b1t99(n)
##def lett(n):
##    s=''
##    for i in range(1,n+1):
##        s += b1000t9999(i)
##    print(s)
##    return len(s)
##
##print(lett(1000))        




#Problem 18 Maximum path sum I
'''
By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.

   3
  7 4
 2 4 6
8 5 9 3

That is, 3 + 7 + 4 + 9 = 23.

Find the maximum total from top to bottom of the triangle below:

                          75
                         95 64
                       17 47 82
                     18 35 87 10
                    20 04 82 47 65
                  19 01 23 75 03 34
                88 02 77 73 07 63 67
              99 65 04 28 06 16 70 92
            41 41 26 56 83 40 80 70 33
          41 48 72 33 47 32 37 16 94 29
        53 71 44 65 25 43 91 52 97 51 14
      70 11 33 28 77 73 17 78 39 68 17 57
    91 71 52 38 17 14 91 43 58 50 27 29 48
  63 66 04 68 89 53 67 30 73 16 69 87 40 31
04 62 98 27 23 09 70 98 73 93 38 53 60 04 23

NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route. However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)'''


printf('Problem 18 Maximum path sum I')
s = '''75
95 64
17 47 82
18 35 87 10
20 04 82 47 65
19 01 23 75 03 34
88 02 77 73 07 63 67
99 65 04 28 06 16 70 92
41 41 26 56 83 40 80 70 33
41 48 72 33 47 32 37 16 94 29
53 71 44 65 25 43 91 52 97 51 14
70 11 33 28 77 73 17 78 39 68 17 57
91 71 52 38 17 14 91 43 58 50 27 29 48
63 66 04 68 89 53 67 30 73 16 69 87 40 31
04 62 98 27 23 09 70 98 73 93 38 53 60 04 23'''

##print(s)
##slist=s.split('\n')
##n = len(slist)
##line=[0 for i in range(2*n-1)]
##data=[line for i in s.split('\n')]
##datas=[i.split() for i in slist]
##print(datas)
##if n%2==0:
##
##def f(n):
##    if n=1:
##        return 1
##    else:
##        return [1* i for i in f(n-1)]
##sl(n)=
##sl(n-1)=[[:-1] for i in rsl]    
##    
##def     

##for i in data:
##    print(i)
##    


##s18l=[i.split() for i in s18\n.split('\n')]
##rows=len(s18l)
##cols=len(s18l[-1])
##print(s18l)
##results=[]
##for i in range(rows):
##    for j in range(i):
##        results.append(s18l[i][j])
##        
##    
##def mulx(tri):
##    if len(tri)==1:
##        return tri[0]
##    elif len(tri)==2:
##        return [tri[0][0]*tri[1][0],tri[0][0]*tri[1][1]
##    else:
##                
##                return              


# Problem 19 Counting Sundays
'''
You are given the following information, but you may prefer to do some research for yourself.

1 Jan 1900 was a Monday.
Thirty days has September,
April, June and November.
All the rest have thirty-one,
Saving February alone,
Which has twenty-eight, rain or shine.
And on leap years, twenty-nine.
A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.
How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?'''

printf('Problem 19 Counting Sundays')


#Problem 20 Factorial digit sum
'''
n! means n × (n − 1) × ... × 3 × 2 × 1

For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,
and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.
Find the sum of the digits in the number 100!'''

##printf('\nProblem 20 Factorial digit sum')
##def fact(n):
##    if n==1:
##        return 1
##    else:
##        return n*fact(n-1)
##
##def sumdigf(n):
##    sumx=0
##    for i in str(fact(n)):
##        sumx += int(i)
##    return sumx    
##print('sum of digits of 10!:(27)',sumdigf(10))
##print('sum of digits of 100!: ',sumdigf(100))

#Problem 21 Amicable numbers
'''
Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).
If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each of a and b are called amicable numbers.

For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.

Evaluate the sum of all the amicable numbers under 10000.'''

##maxn=10000
##import math
##
##def sum_pdivisors(n):
##    spd=0
##    nsqrt = int(math.sqrt(n))
##    
##    for i in range(2,nsqrt+1): # +1
##        if n%i==0:
##            spd += i+ n//i
##            
##    if nsqrt**2 == n : spd -= nsqrt 
##    return spd+1
##
##def maxratio(n):  
##    x=1
##    maxr=0
##
##    while x<=10000:
##        if sum_pdivisors(x)/x > maxr:
##            maxr = sum_pdivisors(x)/x
##        x+=1
##    return maxr
##
##print('max ratio under 10000:', maxratio(10000))
##
##def is_amicable(m,n):
##    return sum_pdivisors(m)== n and m==sum_pdivisors(n)
##
##print('are 220 and 284 a pair?(yes)',is_amicable(220,284))
##
##maxr=int(maxratio(maxn))+1
##def amicablePairs(maxn):
##    ami_pairs=[]
##    sumx=0
##    for i in range(maxn):
##        for j in range(i//maxr,i+1): #'float' object cannot be interpreted as an integer
##            if is_amicable(i,j):
##                if i!=j: # i!=j
##                    print(i,j)            
##                    ami_pairs.append((i,j))  
##    for i in ami_pairs:
##        sumx+=sum(i)
##    return sumx,ami_pairs
##
##print('amicable pairs under 10000',amicablePairs(10000)) 
##


#Problem 22 Names scores
'''
Using names.txt (right click and 'Save Link/Target As...'), a 46K text file containing over five-thousand first names, begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, multiply this value by its alphabetical position in the list to obtain a name score.

For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So, COLIN would obtain a score of 938 × 53 = 49714.

What is the total of all the name scores in the file?'''

##print('\n#Problem 22 Names scores')
##fname=r'C:\Python33\pyGC\GC\euler_names.txt'
##def totalnamescore(fname):
##    sumx=0
##    
##    with open(fname,'r') as f:
##        fr=f.read().replace('"','').split(',')
##    print(len(fr))    
##    frsorted= sorted(fr)
##    for i in range(len(frsorted)):
##        sumi=0
##        for j in frsorted[i]:# for j in frsorted(i): TypeError: 'list' object is not callable
##            sumi+=ord(j)-ord('A')+1
##        sumx += sumi*(i+1)
##    return sumx
##print('taotal name score:',totalnamescore(fname))
# 871198282


# Problem 23 Non-abundant sums
'''
A perfect number is a number for which the sum of its proper divisors is exactly equal to the number. For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.

A number n is called deficient if the sum of its proper divisors is less than n and it is called abundant if this sum exceeds n.

As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number that can be written as the sum of two abundant numbers is 24. By mathematical analysis, it can be shown that all integers greater than 28123 can be written as the sum of two abundant numbers. However, this upper limit cannot be reduced any further by analysis even though it is known that the greatest number that cannot be expressed as the sum of two abundant numbers is less than this limit.

Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers.'''

printf('Problem 23 Non-abundant sum')


#Problem 24 Lexicographic permutations
'''
A permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:

012   021   102   120   201   210

What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?
'''
##print('\nProblem 24 Lexicographic permutations')
##from itertools import permutations
##perms = [''.join(p) for p in permutations('0123456789')]
##permsorted= sorted(perms)
##print(permsorted[1000000-1])

# Problem 25 1000-digit Fibonacci number
'''
The Fibonacci sequence is defined by the recurrence relation:

Fn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1.
Hence the first 12 terms will be:

F1 = 1
F2 = 1
F3 = 2
F4 = 3
F5 = 5
F6 = 8
F7 = 13
F8 = 21
F9 = 34
F10 = 55
F11 = 89
F12 = 144
The 12th term, F12, is the first term to contain three digits.

What is the first term in the Fibonacci sequence to contain 1000 digits?'''

##print('\nProblem 25 1000-digit Fibonacci number')
##def fib(n):
##    a=1
##    b=1
##    c=1
##    while a//10**(n-1) < 1:             
##        a,b=b,a+b
##        c+=1
##    else: return c,a
##print('1 digit:(1)',fib(1))
##print('2 digit:(13)',fib(2))
##print('3 digit:(144)',fib(3))
##print('1000 digit:',fib(1000))


# Problem 26 Reciprocal cycles
'''
A unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:

1/2	= 	0.5
1/3	= 	0.(3)
1/4	= 	0.25
1/5	= 	0.2
1/6	= 	0.1(6)
1/7	= 	0.(142857)
1/8	= 	0.125
1/9	= 	0.(1)
1/10	= 	0.1
Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can be seen that 1/7 has a 6-digit recurring cycle.

Find the value of d < 1000 for which 1/d contains the longest recurring cycle in its decimal fraction part.
'''
printf('Problem 26 Reciprocal cycles')
##def recc(n):
##    x=1/n
##    sx=str(x)[2:]
##    ln=len(sx)
###    print(x,sx)
###    input()
##    if ln>5:
##        for i in range(1,ln-1):
##            for j in range(i+1,ln):
##                print(i,j)
##                if sx[i:j]==sx[j:(2j-i)]: # 0,1 [1:1]slice indices must be integers or None or have an __index__ method
##
##    #                    print(i,j)
##                    return j-i
##    else: return 0
##def ldf(maxn):
##    maxd=1
##    maxi=0
##    for i in range(3,maxn):
##        if maxd<recc(i):
##            maxd=recc(i)
##            maxi=i
##    return(maxd,maxi,1/maxi)
##
##print(ldf(1000))




# Problem 27 Quadratic primes

'''
Euler discovered the remarkable quadratic formula:

n² + n + 41

It turns out that the formula will produce 40 primes for the consecutive values n = 0 to 39. However, when n = 40, 402 + 40 + 41 = 40(40 + 1) + 41 is divisible by 41, and certainly when n = 41, 41² + 41 + 41 is clearly divisible by 41.

The incredible formula  n² − 79n + 1601 was discovered, which produces 80 primes for the consecutive values n = 0 to 79. The product of the coefficients, −79 and 1601, is −126479.

Considering quadratics of the form:

n² + an + b, where |a| < 1000 and |b| < 1000

where |n| is the modulus/absolute value of n
e.g. |11| = 11 and |−4| = 4
Find the product of the coefficients, a and b, for the quadratic expression that produces the maximum number of primes for consecutive values of n, starting with n = 0.'''
##printf('\nProblem 27 Quadratic primes')
##
##import math
##def isprime2(n):
##    '''a faster way to return True if n is a prime False otherwise '''
##    
##    nsqrt=int(math.sqrt(n))
##    i=2
##    while i<nsqrt+1:
##        if n%i==0:
##            return False
##        else:
##            i=i+1			
##    else: return True
##print('2',isprime2(2))
##print('29',isprime2(29))
##print('54',isprime2(54))
##print('23',isprime2(23))
##
##
##def isconsep(a,b,n):
##    for i in range(n):
##        if i**2+a*i+b<0 or not isprime2(i**2+a*i+b):
##            return False
##    else: #######place it, and test before use##############
##        return True
##
##print('isconsep(a,b,n):1,41,40',isconsep(1,41,40))
##print('isconsep(a,b,n):1,41,41',isconsep(1,41,41))
##print('isconsep(a,b,n):-79,1601,79',isconsep(-79,1601,79))
##print('isconsep(a,b,n):-79,1601,80',isconsep(-79,1601,80))
##print('isconsep(a,b,n):-79,1601,81',isconsep(-79,1601,81))
##      
##def maxn(man):    
##    a=0
##    b=0
##    n=0
##    for i in range(1-man,man):
##        for j in range(1,man):
##            k=40            
##            while isconsep(i,j,k):
##                if k>n:
##                    n=k
##                    a=i
##                    b=j
##                    #print(n,a,b)
##                k+=1
##    return a,b,n
##xxx=maxn(1000)
##print(xxx)
##print(xxx[0]*xxx[1])

# Problem 28 Number spiral diagonals
'''
Starting with the number 1 and moving to the right in a clockwise direction a 5 by 5 spiral is formed as follows:

21 22 23 24 25
20  7  8  9 10
19  6  1  2 11
18  5  4  3 12
17 16 15 14 13

It can be verified that the sum of the numbers on the diagonals is 101.

What is the sum of the numbers on the diagonals in a 1001 by 1001 spiral formed in the same way?'''

printf('Problem 28 Number spiral diagonals')
##def mkmatrix(n):
##    ma=[]
##    for i in range(n):
##        ma.append([])
##        ma[i].append(n)


# Problem 29 Distinct powers
'''
Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

22=4, 23=8, 24=16, 25=32
32=9, 33=27, 34=81, 35=243
42=16, 43=64, 44=256, 45=1024
52=25, 53=125, 54=625, 55=3125
If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?'''        

##printf('\nProblem 29 Distinct powers')
##def allp(x,y):
##    results=[]
##    result=[]
##    for i in range(x,y+1):
##        for j in range(x,y+1):
##            results.append(i**j)
##    for x in results:
##        if x not in result:
##            result.append(x)
##    return sorted(result)
##print('2,5',allp(2,5))
##print('2,100 len',len(allp(2,100)))



# Problem 30 Digit fifth powers
'''
Surprisingly there are only three numbers that can be written as the sum of fourth powers of their digits:

1634 = 14 + 64 + 34 + 44
8208 = 84 + 24 + 04 + 84
9474 = 94 + 44 + 74 + 44
As 1 = 14 is not a sum it is not included.

The sum of these numbers is 1634 + 8208 + 9474 = 19316.

Find the sum of all the numbers that can be written as the sum of fifth powers of their digits.'''

##printf('\nProblem 30 Digit fifth powers')
##
##def npown(n):
##    np=[]
##    for i in range(2,n*9**n):
##        sumi=0
##        for x in str(i):
##            sumi+=int(x)**n
##        if i==sumi:
##            np.append(i)
##    return np
##print('4',npown(4))
##ans=npown(5)
##print('5',ans)
##print('ans:',sum(ans))
'''
4 [0, 1, 1634, 8208, 9474]
5 [0, 1, 4150, 4151, 54748, 92727, 93084, 194979]
ans: 443840
'''

#Problem 31 Coin sums
'''
In England the currency is made up of pound, £, and pence, p, and there are eight coins in general circulation:

1p, 2p, 5p, 10p, 20p, 50p, £1 (100p) and £2 (200p).
It is possible to make £2 in the following way:

1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p
How many different ways can £2 be made using any number of coins?'''

printf('Problem 31 Coin sums')

##def ans(p):
##    units=[1, 2, 5, 10, 20, 50, 100,200]
##    #comb=[]
##    count=0
##    for i1 in range(p//1+1):
##        for i2 in range(p//2+1):
##            for i5 in range(p//5+1):
##                for i10 in range(p//10+1):
##                    for i20 in range(p//20+1):
##                        for i50 in range(p//+1):
##                            for i100 in range(p//100+1):
##                                for i200 in range(p//200+1):
##                                    if 1*i1+2*i2+5*i5+10*i10+20*i20+50*i50+100*i100+200*i200==p:
##                                        count+=1
##                                        #comb.append((i1,i2,i5,i10,i20,i50,100,i200))
##    return count
##
##print('1',ans(1))
##print('5',ans(5))
##print('50',ans(50))
##print('200',ans(200))


#Problem 32 Pandigital products
'''
We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once; for example, the 5-digit number, 15234, is 1 through 5 pandigital.

The product 7254 is unusual, as the identity, 39 × 186 = 7254, containing multiplicand, multiplier, and product is 1 through 9 pandigital.

Find the sum of all products whose multiplicand/multiplier/product identity can be written as a 1 through 9 pandigital.

HINT: Some products can be obtained in more than one way so be sure to only include it once in your sum.'''

##def ispan(i,j):
##    s=str(i)+str(j)+str(i*j)
##    if len(s)!=9:return False
##    else:
##        flag=True        
##        for x in '123456789':
##            if not x in s:
##                return False
##        else: return True
##print('39,186',ispan(39,186)) #39,186 True
##
##
##def sumprod():
##    ss=[]
##    for i in range(1,1000):
##        for j in range(100,10000):
##            if ispan(i,j):
##                ss.append((i,j))
##    print(ss)            
##    x= sum(set([i[0]*i[1] for i in ss]))
##    return x
##print(sumprod())
###[(4, 1738), (4, 1963), (12, 483), (18, 297), (27, 198), (28, 157), (39, 186), (42, 138), (48, 159)]
###45228


#Problem 33 Digit canceling fractions
'''
The fraction 49/98 is a curious fraction, as an inexperienced mathematician in attempting to simplify it may incorrectly believe that 49/98 = 4/8, which is correct, is obtained by cancelling the 9s.

We shall consider fractions like, 30/50 = 3/5, to be trivial examples.

There are exactly four non-trivial examples of this type of fraction, less than one in value, and containing two digits in the numerator and denominator.

If the product of these four fractions is given in its lowest common terms, find the value of the denominator.
'''

##printf('\nProblem 33 Digit canceling fractions')
####ans=[]
####for i in range(1,10):
####    for j in range(1,10):
####        for k in range(1,10):
####            for l in range(1,10):
####                if (10*i+j)*k ==(10*k+l)*i or (10*i+j)*l==(10*k+l)*i or (10*i+j)*k==(10*k+l)*j or (10*i+j)*l==(10*k+l)*j:
####                    ans.append((10*i+j,10*k+l))
####print(ans)
##
##x=[]
##y=[]
##for i in range(1,10):
##    for j in range(1,10):
##        for k in range(1,10):
##            for l in range(1,10):
##                if (10*i+j)*l ==(10*k+l)*i and i!=j and i!=k and j==k and (10*i+j)/(10*k+l)<l:
##                    x.append((10*i+j,10*k+l))
##                    y.append((i,l))
##print(x)
##'''[(16, 64), (19, 95), (26, 65), (49, 98)]'''
##xx=[i[1] for i in x]
##yy=[i[1] for i in y]  
##print(xx)
##print(yy)
##def lowest_common_terms(x):
##    mul=1
##    for i in x:
##        mul*=i
##        for i in range(1,mul+1):
##            divable=True
##            for j in x:
##                if i%j != 0:
##                    divable = False
##            if divable:
##                return i
##      
###print(lowest_common_terms(xx))    
##print(lowest_common_terms(yy))
##
##
##def mul(lst):
##    mul=1
##    for i in lst:
##        mul*=i
##    return mul
##
##import math
##def isprime(n):
##    '''a faster way to return True if n is a prime False otherwise '''
##    i=2
##    nsqrt = int(math.sqrt(n))
##    while i<=nsqrt:
##            if n%i==0:
##                    return False
##            else:
##                    i=i+1			
##    else: return True
##print('2',isprime(2))
##print('23',isprime(23))
##print('24',isprime(24))
##        
##import math
##def primefactors(n):
##    primef=[]      
##    for i in range(2,n+1):
##        if isprime(i) and n%i == 0:
##            k=0
##            while n%(i**k)==0:
##                k+=1
##            for j in range(k-1):
##                primef.append(i)                                      
##    return primef            
##
##print('24',primefactors(24))  
##xmu=[i[1] for i in x]
##xzi=[i[0] for i in x]
##mu=[]
##zi=[]
##for i in xmu:
##    x=primefactors(i)
##    print(x)
##    mu.extend(x)
##for i in xzi:
##    zi.extend(primefactors(i))    
##
##print('mu',mu)
##print('zi',zi)
##
##for i in zi:
##    if i in mu:
##        print(i)
##        mu.remove(i)
##
##print('mu',mu)
##print(mul(mu))        

#Problem 34 Digit factorials
'''
145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145.

Find the sum of all numbers which are equal to the sum of the factorial of their digits.

Note: as 1! = 1 and 2! = 2 are not sums they are not included.'''


##def fact(n):
##    if n==0:
##        return 1
##    else:
##        return n*fact(n-1)
##print('1!:(1)',fact(1))
##print('4!:(24)',fact(4))
##print('5!:(120)',fact(5))
##
##
##def iscurious(n):
##        sumf=0
##        for i in str(n):
###            print(i)
##            sumf += fact(int(i))
##        return sumf==n
##print('is 145 curious1!:(yes)',iscurious(145))
##print('is 145 curious1!:(yes)',iscurious(300))
##
##
####    if iscurious(i):
####        print(i)
##
##def sumx(n):
##    x=0
##    for i in range(3,n):
##        if iscurious(i):
##          x+=i
##    return x      
##
##print(sumx(300000))

#Problem 35 Circular primes
'''
The number, 197, is called a circular prime because all rotations of the digits: 197, 971, and 719, are themselves prime.

There are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.

How many circular primes are there below one million?
'''
##printf('Problem 35 Circular primes')
##
##from math import sqrt
##def isprime(n):
##    nsqrt=int(sqrt(n))
##    for i in range(2,nsqrt+1): #+1
##        if n%i==0:
##            return False
##    else: return True
##
##print('2',isprime(2))
##print('4',isprime(4))
##print('12',isprime(12))
##print('89',isprime(89))
##
##def rotate(s):
##    sr=[]
##    ln=len(s)
##    for i in range(ln):
##        sr.append(s[i:]+s[:i])
##    return sr
##
##print('123456',rotate('123456'))
##print('123',rotate('123'))
##
##def iscir(n):
##    for x in rotate(str(n)):
##        if not isprime(int(x)):
##            return False
##    else: return True
##
##print('4',iscir(4)) #
##print('197',iscir(197))
##
##def cirs(n):      
##    cir=0
##    cirx=[]
##    for i in range(2,n):
##        if iscir(i):
##            cirx.append(i)
##            cir+=1
##    return cir,cirx
##print('100 ', cirs(100))
##print('1000000 ', cirs(1000000))


#Problem 36 Double-base palindromes
'''
The decimal number, 585 = 10010010012 (binary), is palindromic in both bases.

Find the sum of all numbers, less than one million, which are palindromic in base 10 and base 2.

(Please note that the palindromic number, in either base, may not include leading zeros.)
'''
##printf('Problem 36 Double-base palindromes')
##
##def isPal(s):
##    return s==s[::-1]
##sum=0 ####### always put out of loop
##for i in range(1000000):    
##    if isPal(str(i)) and isPal(bin(i)[2:]):
##        sum+=i
##print(sum)



#Problem 37 Truncatable primes
'''
The number 3797 has an interesting property. Being prime itself, it is possible to continuously remove digits from left to right, and remain prime at each stage: 3797, 797, 97, and 7. Similarly we can work from right to left: 3797, 379, 37, and 3.

Find the sum of the only eleven primes that are both truncatable from left to right and right to left.

NOTE: 2, 3, 5, and 7 are not considered to be truncatable primes.
'''
printf('Problem 37 Truncatable primes')

##base='1379'
##base2=2*base
##
##from itertools import permutations as perm
##from math import sqrt
##
##def isprime(n):
##    nsqrt=int(sqrt(n))
##    for i in range(2,nsqrt+1):
##        if n%i==0:
##            return False
##    else: return True
##
##def cans(base):
##    candi=[]
##    for i in range(2,len(base)+1):
##        candi.extend([int(''.join(i)) for i in perm(base,i)])
##    return candi
##print(cans(base))
###print(cans(base2)) siji
##
##def truncatable2(n):
##    ns=str(n)
##    if not isprime(int(ns)):return False
##    else:
##        for i in range(len(ns)-1): ###TypeError: 'int' object is not iterable
##            if not isprime(int(ns[i+1:])) or not isprime(int(ns[:i+1])):
##                return False
##        else: return True
##
##print('3797',truncatable2(3797))
##print('39',truncatable2(39)) 
##
##def trunc(candi):
##    x=[]    
##    for i in candi:
##        if truncatable2(i):
##            x.append(i)
##    return x,sum(x)
##
##
##print(trunc(cans(base)))
##print(trunc(cans(base2)))


# Problem 38 Pandigital multiples
'''
Take the number 192 and multiply it by each of 1, 2, and 3:

192 × 1 = 192
192 × 2 = 384
192 × 3 = 576
By concatenating each product we get the 1 to 9 pandigital, 192384576. We will call 192384576 the concatenated product of 192 and (1,2,3)

The same can be achieved by starting with 9 and multiplying by 1, 2, 3, 4, and 5, giving the pandigital, 918273645, which is the concatenated product of 9 and (1,2,3,4,5).

What is the largest 1 to 9 pandigital 9-digit number that can be formed as the concatenated product of an integer with (1,2, ... , n) where n > 1?'''

##printf('\nProblem 38 Pandigital multiples')
##def ispan(ns):
##    if len(ns)!=9:return False
##    else:
##        flag=True        
##        for x in '123456789':
##            if not x in ns:
##                return False
##        else: return True
##
##print('192384576 is span',ispan(str(192384576))) #39,186 True
##
##def pand():
##    sx=[]
##    for i in range(1,10000):
##        for j in range(2,12):
##            s=''
##            for k in range(1,j):
##                s+=str(i*k)
##            if s!='' and ispan(s):
##                sx.append([int(s),i,k])
##    return sx
##
##print(pand()[::-1])



# Problem 39 Integer right triangles
'''
If p is the perimeter of a right angle triangle with integral length sides, {a,b,c}, there are exactly three solutions for p = 120.

{20,48,52}, {24,45,51}, {30,40,50}

For which value of p ≤ 1000, is the number of solutions maximised?
'''

##printf('\nProblem 39 Integer right triangles')
##
##def n(p):
##    k=0
##    for i in range(1,p//2):
##        for j in range(i,p//2):
##            if (p-i-j)**2+i**2==j**2: #and i<p-i-j:
##                k+=1
##    return k//2
##
##print('p=120',n(120))
##
##k=0
##ik=3
##for p in range(3,1001):
##    pk=n(p)
##    if pk>k:
##        k=pk
##        ik=p
##
##print(k,ik)        


#Problem 40 Champernowne's constant
'''
An irrational decimal fraction is created by concatenating the positive integers:

0.123456789101112131415161718192021...

It can be seen that the 12th digit of the fractional part is 1.

If dn represents the nth digit of the fractional part, find the value of the following expression.

d1 × d10 × d100 × d1000 × d10000 × d100000 × d1000000
'''
##printf("Problem 40 Champernowne's constant")
##s=''
##su=0
##for i in range(1,1000000):    
##    s+=str(i)
##print(su)    
##print(s[12-1])
##print(s[15-1])
##print(s[:12])
##
##ds=1
##for i in range(6+1):
##    ds *= int(s[10**i-1])
##print(ds)

#Problem 41 Pandigital prime
'''
We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once. For example, 2143 is a 4-digit pandigital and is also prime.

What is the largest n-digit pandigital prime that exists?
'''

##printf('\nProblem 41 Pandigital prime')
##
##import math
##def isprime(n):
##    nsqrt=int(math.sqrt(n))
##    for i in range(2,nsqrt):
##        if n%i == 0:
##            return False
##    else:
##            return True
##
##from itertools import permutations as perm
##def pand(n):
##    s=''
##    for i in range(1,n+1):
##        s+=str(i)
##    return [int(''.join(i)) for i in perm(s)]    
##
##print('3',pand(3))
##print('4',pand(4))
##
##maxp=0
##for i in range(2,10):
##    for j in pand(i):
##        if isprime(j):
##            if j>maxp:
##                maxp=j
##print(maxp)    


# Problem 42 Coded triangle numbers
'''
The nth term of the sequence of triangle numbers is given by, tn = ½n(n+1); so the first ten triangle numbers are:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

By converting each letter in a word to a number corresponding to its alphabetical position and adding these values we form a word value. For example, the word value for SKY is 19 + 11 + 25 = 55 = t10. If the word value is a triangle number then we shall call the word a triangle word.

Using words.txt (right click and 'Save Link/Target As...'), a 16K text file containing nearly two-thousand common English words, how many are triangle words?
'''
##printf('Problem 42 Coded triangle numbers')
##
##with open(r'c:\x\abc\words.txt','r') as f:
##    fr=f.read()
##s=fr.replace('"','').split(',')
##
##def trinum(S):
##    s=0
##    for i in S:
##        s += ord(i)-ord('A')+1
##    return s
##print('SKY ',trinum('SKY'))
##
##trinums=[i*(i+1)//2 for i in range(1,1000)]
##print(trinums[:10])
##
##many=0
##for i in s:
##    if trinum(i) in trinums:
##        many+=1
##print(many) 


# Problem 43 Sub-string divisibility
'''
The number, 1406357289, is a 0 to 9 pandigital number because it is made up of each of the digits 0 to 9 in some order, but it also has a rather interesting sub-string divisibility property.

Let d1 be the 1st digit, d2 be the 2nd digit, and so on. In this way, we note the following:

d2d3d4=406 is divisible by 2
d3d4d5=063 is divisible by 3
d4d5d6=635 is divisible by 5
d5d6d7=357 is divisible by 7
d6d7d8=572 is divisible by 11
d7d8d9=728 is divisible by 13
d8d9d10=289 is divisible by 17
Find the sum of all 0 to 9 pandigital numbers with this property.
'''

##printf('Problem 43 Sub-string divisibility')
##
##from itertools import permutations as perm
##d=''
##for i in range(10):
##    d+=str(i)
##print(d)
##
##s=[''.join(i) for i in perm(d)]
##si=[]
##sumx=0
##for i in s:
##    if int(i[1:4])%2==0 and int(i[2:5])%3==0 and int(i[3:6])%5==0 and int(i[4:7])%7==0 and int(i[5:8])%11==0 and int(i[6:9])%13==0 and int(i[7:10])%17==0:
##        si.append(i)
##        sumx+=int(i)
##        
##print(si)
##print(sumx)


# Problem 44 Pentagon numbers
'''
Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?'''

printf('Problem 44 Pentagon numbers')

##def pen(n):
##    return [i*(3*i-1)//2 for i in range(1,n+1)]
##print(pen(10))
##
##n=10000
##D=n
##s=pen(n)
##x=(0,0)
##
##for i in range(n-1):
##    for j in range(i+1,n):
##        if s[i]+s[j] in s and s[j]-s[i] in s and D>s[j]-s[i]:
##            D=s[j]-s[i]
##            x=(i,j)
##
##print(D,x)            


# Problem 45 Triangular, pentagonal, and hexagonal
'''
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.'''

printf('Problem 45 Triangular, pentagonal, and hexagonal')

##def Tn(n0,n1):
##    return [(i*(i+1)//2) for i in range(n0,n1+1)]
##print(Tn(1,285))
##
##def Pn(n0,n1):
##    return [i*(3*i-1)//2 for i in range(n0,n1+1)]
##print(Pn(1,165))
##
##def Hn(n0,n1):
##    return [i*(2*i-1) for i in range(n0,n1+1)]
##print(Hn(1,143))
##
##def isTPH(i):
##    return i in Tn(285,2850) and i in Pn(165,1650) and i in Hn(143,1430)
##
##print(isTPH(40755))
##
##n=28500
##t=Tn(285,28500)
##print('t')
##p=tuple(Pn(165,16500))
##print('p')
##h=tuple(Hn(143,14300))
##print('h')
##
##def nextn(n):
##    for i in range(285+1,n):
##        x=(i*(i+1)//2)    
##        if x in p and x in h:  # don't make it repeatedly calling the func
##            return i
##
##print(nextn(1000000))

# Problem 46 Goldbach's other conjecture

'''
It was proposed by Christian Goldbach that every odd composite number can be written as the sum of a prime and twice a square.

9 = 7 + 2×1**2
15 = 7 + 2×2**2
21 = 3 + 2×3**2
25 = 7 + 2×3**2
27 = 19 + 2×2**2
33 = 31 + 2×1**2

It turns out that the conjecture was false.

What is the smallest odd composite that cannot be written as the sum of a prime and twice a square?'''

##printf("\nProblem 46 Goldbach's other conjecture")
##import math
##def isprime2(n):
##    '''a faster way to return True if n is a prime False otherwise '''
##    
##    nsqrt=int(math.sqrt(n))
##    i=2
##    while i<nsqrt+1:
##            if n%i==0:
##                    #print(i)
##                    return False
##            else:
##                    i=i+1			
##    else: return True
##
##def prime(n):
##    i=2
##    while i<n:
##        if isprime2(i):
##            yield i
##        i+=1    
##    
##primes=[i for i in range(2,10000) if isprime2(i)]
##
##printf("\nProblem 46 Goldbach's other conjecture")
##def chkGo(n):
##    for i in primes:
##        for j in range(n):
##            if i+2*j**2==n:
##                return True
##    else: return False        
##
##def findx(n):
##    for i in range(1,n,2):
##        if not isprime2(i) and not chkGo(i):
##            return i
##    else: return 0
##
##print(findx(1000000))

#Problem 47 Distinct primes factors
'''
The first two consecutive numbers to have two distinct prime factors are:

14 = 2 × 7
15 = 3 × 5

The first three consecutive numbers to have three distinct prime factors are:

644 = 2² × 7 × 23
645 = 3 × 5 × 43
646 = 2 × 17 × 19.

Find the first four consecutive integers to have four distinct prime factors. What is the first of these numbers?'''

##printf('\nProblem 47 Distinct primes factors')
##
##import math
##def isprime2(n):
##    '''a faster way to return True if n is a prime False otherwise '''
##    
##    nsqrt=int(math.sqrt(n))
##    i=2
##    while i<nsqrt+1:
##            if n%i==0:
##                    #print(i)
##                    return False
##            else:
##                    i=i+1			
##    else: return True
##
##primes=[i for i in range(2,10000) if isprime2(i)]
##
##def pfacs(n):
##    pfac=[]
##    for j in primes:
##        if n%j == 0:
##            i=10 # autoexpand i?
##            while n%(j**i) !=0 and i>=1:
##                i-=1
##            else:
##                pfac.append(j**i)
##    return pfac
##
##print('pfac 14',pfacs(14))
##print('pfac 15',pfacs(15))
##print('pfac 644',pfacs(644))
##print('pfac 645',pfacs(645))
##print('pfac 646',pfacs(646))
##
##print('pfac 4562',pfacs(4562))
##
##ln = len(primes)
##print('primes', ln)
##
##def pf4(n,i):
##    times=0
##    for j in primes:
##        if n%j == 0:
##            times+=1
##    if times == i:
##        return True
##    else:
##        return False
##    
####def diff(l1,l2):
####    for i in l1:
####        if i in l2:
####            return False
####    else:
####        return True    
##
######### how to auto expand the 'and conditionals'
##for i in range(10,100):
##    k=2
##    if pf4(i,k) and pf4(i+1,k) and len(set(pfacs(i)+pfacs(i+1)))==k**2:
##        print(i,i+1)
##
##for i in range(100,1000):
##    k=3
##    if pf4(i,k) and pf4(i+1,k) and pf4(i+2,k) and len(set(pfacs(i)+pfacs(i+1)+pfacs(i+2)))==k**2:
##        print(i,i+1,i+2)
##def x4():
##    for i in range(1000,10000000):
##        k=4
##        if pf4(i,k) and pf4(i+1,k) and pf4(i+2,k) and pf4(i+3,k) and len(set(pfacs(i)+ pfacs(i+1)+ pfacs(i+2)+ pfacs(i+3)))==k**2:
##            return(i,i+1,i+2,i+3) # == print and break
##for i in x4():
##    print(i,pfacs(i))
##       
# 5 minutes rule.    
    


 

#Problem 48 Self powers
'''
The series, 1**1 + 2**2 + 3**3 + ... + 10**10 = 10405071317.
Find the last ten digits of the series, 1**1 + 2**2 + 3**3 + ... + 1000**1000.
'''

##print('\nProblem 48 Self powers')
##def last(n):
##    last10=1
##    for i in range(n):
##        last10=last10*n
##        if last10>10**10:
##            last10=last10%(10**10)
##    return last10
##
##def allast10(n):
##    sums=0
##    for i in range(1,n+1):
##        sums+=last(i)
##    return str(sums)[-10:]
##        
##print('10\t',allast10(10))
##print('100\t',allast10(1000))
'''
10	 10405071317
100	 4639110846700
'''

# Problem 49 Prime permutations
'''
The arithmetic sequence, 1487, 4817, 8147, in which each of the terms increases by 3330, is unusual in two ways: (i) each of the three terms are prime, and, (ii) each of the 4-digit numbers are permutations of one another.

There are no arithmetic sequences made up of three 1-, 2-, or 3-digit primes, exhibiting this property, but there is one other 4-digit increasing sequence.

What 12-digit number do you form by concatenating the three terms in this sequence?
'''
##printf('\nProblem 49 Prime permutations')

#from itertools import permutations
##import math
##def isprime2(n):
##    '''a faster way to return True if n is a prime False otherwise '''
##    
##    nsqrt=int(math.sqrt(n))
##    i=2
##    while i<nsqrt+1:
##            if n%i==0:
##                    #print(i)
##                    return False
##            else:
##                    i=i+1			
##    else: return True
##
##primes=[i for i in range(1000,10000) if isprime2(i)]
##
##ln = len(primes)
##print('primes', ln)
##
##def same(a,b,c):
##    '''a,b,c has the same digits'''
##    return sorted(str(a)) == sorted(str(c)) and sorted(str(a)) == sorted(i for i in str(b)) #sorted([i for i in str(c)])
##    
##for i in range(ln-4):
##	for j in range(i+2,ln-2):
##		for k in range(j+2,ln):
##			if  primes[i]+primes[k]==2*primes[j] and same(primes[i],primes[k],primes[j]): # change the order improve the speed significantly
##				print(primes[i],primes[j],primes[k])
##


#Problem 50 Consecutive prime sum
'''
The prime 41, can be written as the sum of six consecutive primes:

41 = 2 + 3 + 5 + 7 + 11 + 13
This is the longest sum of consecutive primes that adds to a prime below one-hundred.

The longest sum of consecutive primes below one-thousand that adds to a prime, contains 21 terms, and is equal to 953.

Which prime, below one-million, can be written as the sum of the most consecutive primes?'''

printf('Problem 50 Consecutive prime sum')
##import math
##def isprime2(n):
##    '''a faster way to return True if n is a prime False otherwise '''
##    
##    nsqrt=int(math.sqrt(n))
##    i=2
##    while i<nsqrt+1:
##            if n%i==0:
##                    #print(i)
##                    return False
##            else:
##                    i=i+1			
##    else: return True
##
##print(isprime2(13))
##print(isprime2(113))
##print(isprime2(139))
##print(isprime2(138))
##
##def allprimes(n):
##    allp=[]
##    for i in range(n):
##        if isprime2(i):
##            allp.append(i)
##    return allp 
##
##allprim=allprimes(1000000)
##
##maxn=len(allprim) #78500 #
##
##print(maxn)
##maxp=(0,0)
##maxv=0
##for i in range(maxn-21):
##    for j in range(i+21,maxn+1):
##        sumprim=sum(allprim[i:j])
##        if isprime2(sumprim) and sumprim<1000:
##            if j-i>maxv:
##                maxv=j-i
##                maxp=(j,i)
##print(maxn,maxp)               

