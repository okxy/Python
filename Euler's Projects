# euler project
'''
http://projecteuler.net/problem=4
'''

# Problem 1 Multiples of 3 and 5
'''If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.'''

def summuls(a,b,limits):
    total=0
    for i in range(limits):
        if i%a==0 or i%b==0:
            total+=i
    return total
#    total=0
#    return sum([i for i in range(limits) if i%a == 0 or i%b==0])
print(summuls(3,5,10))
#print('summuls(3,5,1000)',summuls(3,5,1000))


# Problem 2 Even Fibonacci numbers
'''Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms. '''
'''
def fib(n):
    a=1
    b=2
    while a<=n:
	    print(a)
	    a,b=b,a+b
'''
print('\nP2 ')
def sumevenfib(n):
    a=b=1
    total=0
    while a<=n:
        if a%2==0: total+=a
        a,b=b,a+b
    return total
#print('sumevenfib(4000000)=',sumevenfib(4000000))



# Problem 3 Largest prime factor
'''The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600851475143 ?'''
print('\nP3 ')
def isprime(n):
    ''' isprime(integer)->boolean
    return True if integer is a prime False otherwise
    '''
    if n in (1,2):
        return True
    else:
        #while
        for i in range(2,n):
            if n%i == 0:
                return False
        else:# indent!!!
            return True

def isprime2(n):
    '''a faster way to return True if n is a prime False otherwise '''
    i=2
    while i<n:
            if n%i==0:
                    #print(i)
                    return False
            else:
                    i=max(i+1,n%i)			
    else: return True

'''
>>>for i in range(1,45%i):
	print(i)
>>>
'''
        
def primes(n):
    prime=[]
    for i in range(1,n):
        if isprime(i):
            #print(i)
            prime.append(i)
    return prime

#[print(i) for i in primes(20)]


def primefactors(n):
    primef=[]
    for i in range(1,n):
        if isprime(i) and n%i == 0:
            #print(i)
            primef.append(i)
    return primef

#print('The prime factors of 13195 are 5, 7, 13 and 29.')
#[print(i,end=' ') for i in primefactors(13195)]
print()
    
def maxprimefactors(n):
    maxprime=1
    for i in primes(n):
        if n%i == 0:
            maxprime= maxprime and i
    return maxprime


#print('maxprimefactors(600851475143)) ',maxprimefactors(600851475143))
# print('end') # never arrived!

def primefactors2(n):
    primef=[]
    for i in range(1,n):
        if isprime2(i) and n%i == 0:
            #print(i)
            primef.append(i)
    return primef

#print('The prime factors222 of 13195 are 5, 7, 13 and 29.')
#[print(i,end=' ') for i in primefactors(13195)]
print()

def fastmpf(n):
    for i in range(1,n//2):
        if n%i ==0 and isprime(n//i):
            return n//i
#print('test:fastmpf(19)) ',fastmpf(19))
#print('test:fastmpf(42)) ',fastmpf(42))
# print('fastmpf(600851475143)) ',fastmpf(600851475143)) #too long

def fastmpf2(n):
    for i in range(1,n//2):
        if n%i ==0 and isprime2(n//i):
            return n//i


# print('test:fastmpf(42)) ',fastmpf2(42))
#print('fastmpf(600851475143)) ',fastmpf2(600851475143))        

# Largest palindrome product
'''Problem 4
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
Find the largest palindrome made from the product of two 3-digit numbers.
'''
print('\nP4')
def maxpal(n):
    nmin=10**(n-1)
    nmax=10**n-1
    mp=[]
    for i in range(nmax,nmin,-1):
        for j in range(nmax,nmin,-1):
            s=str(i*j)
            if s==s[::-1]:
                mp.append((i*j,i,j))
#    x=sorted(mp,reverse=True)    
    return max(mp)
print('2-digit numbers is 9009 = 91 × 99')            
print('2 digits: %d * %d = %d' % maxpal(2) )
print('3 digits: %d * %d = %d' % maxpal(3) )
            
def maxpals():
    for i in range(999,100,-1):
        for j in range(999,100,-1):
            s=str(i*j)
            if s==s[::-1]:
                return((i,j,i*j))
#print('3 digits: %d * %d = %d' % maxpals() )


# Smallest multiple
'''Problem 5
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
'''
print('\n P5')
def minmul(n):
    x=n
    flag= True # not False
    while 1:
        for i in range(1,n+1):
            flag = flag and x%i ==0
        if flag:
            return x
            break
        else:
            x+=n
    

# print('2520 for 1-10',minmul(10)) # never worked
# print('x for 1-20',minmul(20))            

def minmul2(n):
    x=n
    flag= False # not False
    while not flag:
        flag = True
        for i in range(1,n+1):            
            if x%i !=0:
                flag = False
                x+=n                
    return x

#print('2520 for 1-10',minmul2(10)) # never worked
#print('x for 1-20',minmul2(20))            
        
#Sum square difference
'''Problem 6
The sum of the squares of the first ten natural numbers is,

12 + 22 + ... + 102 = 385
The square of the sum of the first ten natural numbers is,

(1 + 2 + ... + 10)2 = 552 = 3025
Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.

Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.'''

print('\nP6')
def dif(n):
    sumosqr=0
    sums=0
    for i in range(1,n+1):
        sumosqr+=i**2
        sums+=i
    sqrofsum=sums**2
    return (sqrofsum,sumosqr,sqrofsum-sumosqr)
print('for 10: 3025 − 385 = 2640')
#print('%d - %d = %d' % dif(10))
#print('%d - %d = %d' % dif(100))


# 10001st prime
'''Problem 7
By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
What is the 10 001st prime number?
'''
print('\nP7')
import math
def isprime3(n):
    '''a much faster way to return True if n is a prime False otherwise '''
    z=True
    for i in range(2,n):
        if i<=math.sqrt(n):
            if n%i!=0:
                z=True
            else:
                z=False
                break
        else:
            break
    return z
  
    
def nstprime(n):
    i=2
    p=3
    while i!=n:
        p+=2
        if isprime3(p):
            i+=1
    return p

# print('6th is 13', nstprime(6))
# print('10001st is ', nstprime(10001))

#Largest product in a series
'''Problem 8
Find the greatest product of five consecutive digits in the 1000-digit number.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
'''

def maxp(s):
    maxp=1
    for i in range(len(s)-5+1):
        p = 1
        for j in range(5):
            p *= int(s[i+j])
        if maxp<p: maxp=p
    return maxp

xx='''73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450'''
#xx=xx.replace('\n','')
#print(maxp(xx))        

#Special Pythagorean triplet
'''Problem 9
A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,

a2 + b2 = c2
For example, 32 + 42 = 9 + 16 = 25 = 52.

There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.'''
print('\nP9')
def abc():
    for a in range(1000//2):
        for b in range(1000//2):
            c=1000-a-b
            if a**2+b**2==c**2:
                return (a,b,c)
'''
m=1
for i in abc():
    m *=i
print(m)
'''
# Summation of primes
'''Problem 10
The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
Find the sum of all the primes below two million.
'''
print('\nP10')
import math
def sumprime(n):
    ps=[2]
    x=3
    '''a much faster way to return True if n is a prime False otherwise '''
    while x<n:
        z=True
        for i in ps:
            if i<= math.sqrt(x):
                if x%i != 0:
                    z=True
                else:
                    z=False
                    break # this is essential! otherwise go to the last for decision
            else: break
        if z:
            ps.append(x)
        x+=2
    return sum(ps)
        
def sumprimes(n):
    total=2
    for i in range(3,n,2):
        if isprime3(i):
            total+=i
    return total
print(' for 10 is 17', sumprimes(10))
print(' for 10 is 17', sumprime(10))
print(' 100  primes ', sumprime(100))
# print(' for 2000000 is ', sumprime(2000000))

